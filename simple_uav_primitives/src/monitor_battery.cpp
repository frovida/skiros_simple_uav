//---------- Mandatory include starts ----------
#include <ros/ros.h>
#include "skiros_skill/module_base.h"    //Base template for all modules
#include "skiros_common/logger_sys.h"   //Skiros logging system
#include "skiros_config/param_types.h"  //Default parameters
#include "skiros_config/declared_uri.h" //Default world model URIs (Unified Resource Identifier) -> generated by skiros_world_model/generate_uri
#include <pluginlib/class_list_macros.h>//Plugin export library
//---------- Mandatory include ends ----------

#include "skiros_world_model/reasoners_loading_func.h"

using namespace skiros_config::owl;
using namespace skiros_wm;

namespace skiros
{

namespace module
{

/*!
 * \brief TODO description
 *
 * Params: \n
 *  TODO \n
 * Failures: \n
 *  TODO \n
 *
 */
class MonitorBattery : public skiros::ModuleBase
{
public:
    /*!
      Here should be defined:
        -name, description, version
        -module parameters
      */
    MonitorBattery()
    {
        /// Specify the skill description constants
        this->setModuleType("MonitorModule");
        this->setVersion("0.0.1");
        ////////////////////////////////////////////////////////
        // Define parameters
        ////////////////////////////////////////////////////////
        getParamHandle()->addParamWithDefaultValue("Robot",
                                                  skiros_wm::Element(concept::Str[concept::Robot]),
                                                  "Robot to monitor for battery state",
                                                  skiros_common::online);
        getParamHandle()->addParamWithDefaultValue("f",
                                                  10.0,
                                                  "Frequency",
                                                  skiros_common::offline);
    }

    bool onInit()
    {
        battery_state_ = "Unknown";
        return true;
    }

    int execute()
    {
        ros::Rate r(getParamHandle()->getParamValue<double>("f"));
        int robot_id = getParamHandle()->getParamValue<Element>("Robot").id();
        Element robot = getWorldHandle()->getElement(robot_id);
        if(!robot.hasProperty("BatteryState"))
        {
            robot.addPropertyString("BatteryState", battery_state_);
            getWorldHandle()->updateElement(robot);
        }
        fake_timeout_ = ros::Time::now();
        while(true)
        {
            if(checkStateChange())
            {
                robot = getWorldHandle()->getElement(robot_id);
                robot.properties("BatteryState").setValue(battery_state_);
                getWorldHandle()->updateElement(robot);
                setProgress("Battery state changed to " + battery_state_);
            }
            r.sleep();
        }
        return 1;
    }

protected:

    bool checkStateChange()
    {
        std::string prev_state = battery_state_;
        /// Here should go a real routine to check the battery...
        if (ros::Time::now()-fake_timeout_>=ros::Duration(15.0))
            battery_state_ = "LowBattery";
        else
            battery_state_ = "HighBattery";
        return battery_state_ != prev_state;
    }

    ros::Time fake_timeout_;
    std::string battery_state_;
}; // class
} // namespace
} // namespace

//Export
PLUGINLIB_EXPORT_CLASS(skiros::module::MonitorBattery, skiros::ModuleBase)
